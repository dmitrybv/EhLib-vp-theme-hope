import{_ as e}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,c as d,f as n}from"./app.ac77cf73.js";const p={},t=n('<h1 id="using-the-drop-down-menu-popupmenu" tabindex="-1"><a class="header-anchor" href="#using-the-drop-down-menu-popupmenu" aria-hidden="true">#</a> Using the drop-down menu PopupMenu</h1><p>At <code>DBGridEh</code> there is a <code>PopupMenuParams</code> property, which manages the construction PopupMenu in the grid. By default, the grid uses the following properties to determine which <code>PopupMenu</code> is displayed by pressing the right mouse button: <code>TDBGridEh.PopupMenu</code>, <code>TColumnEh.PopupMenu</code>, <code>TColumnEh.Title.PopupMenu</code>. Using subproperties properties <code>TDBGridEh.PopupMenuParams</code> can expand choice and formation of <code>PopupMenu</code>.</p><p>The <code>PopupMenuParams</code> property includes the following subproperties:</p><p><code>BuildMenuOnPopup: Boolean</code></p><dd><p>Defines if it is necessary to build a new PopupMenu or use ready-made. If <code>BuildMenuOnPopup = True</code>, the grid will form a new <code>PopupMenu</code> before being displayed. This allows you to create new elements <code>PopupMenu</code> or change / delete existing <code>PopupMenu</code> before displaying on the screen. Thus, the elements <code>PopupMenu</code> can be formed dynamically depending on the location display, and other conditions affecting the list.</p></dd><p><code>UseGlobalMenu: Boolean</code></p><dd><p>Specifies whether you want to add items to the menu in the global <code>PopupMenu</code> grid. The elements are formed in a global menu procedure <code>TDBGridEhCenter.BuildCellPopupMenu</code>. By default <code>BuildCellPopupMenu</code> adds nothing. You can write your version of <code>TDBGridEhCenter</code> class and override the method <code>BuildCellPopupMenu</code> to add new elements to the <code>PopupMenu</code> all Grids of the project. See more info in the section <code>Using global properties for TDBGridEh</code>.</p></dd>',7),i=[t];function u(c,r){return o(),d("div",null,i)}const l=e(p,[["render",u],["__file","40-using-drop-down-menu.html.vue"]]);export{l as default};

import{_ as e}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as t,c as o,f as a}from"./app.ac77cf73.js";const i={},r=a('<h1 id="workig-with-tmemtableeh-at-design-time" tabindex="-1"><a class="header-anchor" href="#workig-with-tmemtableeh-at-design-time" aria-hidden="true">#</a> Workig with TMemTableEh at design-time</h1><p>At design-time the double click on the component opens a window of component controling - <code>TMemTableFieldsEditor</code>. It allows:</p><ul><li><p>Create fields (TField components) for TMemTableEh.</p></li><li><p>Fill TMemTableEh datas.</p></li><li><p>Load data in TMemTableEh from other DataSet.</p></li><li><p>Create &#39;stand-aloneâ€™ array of data.</p></li><li><p>Clean TMemTableEh.</p></li></ul><p>Create new <code>TDataDriver</code> object for <code>TMemTableEh</code> basing on existing DataSet-source of data. Herewith, designer will try to assign <code>DataDriver</code> properties founding on the type DataSet-source. For instance, if you choose to create <code>DataDriver</code> of <code>TSQLDataDriver</code> type and DataSet-source will have a <code>TQuery</code> type, the designer will assign <code>TSQLDataDriver.SelectComand.CommandText</code> property automatically from <code>TQuery.SQL</code> property.</p>',4),l=[r];function d(n,c){return t(),o("div",null,l)}const h=e(i,[["render",d],["__file","22-workig-with-tmemtableeh-at-designtime.html.vue"]]);export{h as default};

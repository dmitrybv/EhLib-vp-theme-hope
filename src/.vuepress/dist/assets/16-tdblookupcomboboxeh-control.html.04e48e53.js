import{_ as o}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as e,c as t,f as i}from"./app.ac77cf73.js";const s={},a=i('<h1 id="using-tdblookupcomboboxeh-control" tabindex="-1"><a class="header-anchor" href="#using-tdblookupcomboboxeh-control" aria-hidden="true">#</a> Using TDBLookupComboboxEh control</h1><p><code>TDBLookupComboBoxEh</code> represents a combo box that identifies a set of field(s) values in one dataset with a corresponding set of values from another dataset. To understand &#39;lookup&#39; concepts see Delphi help, Topic - Displaying and editing data in lookup list and combo boxes.</p><p><code>TDBLookupComboboxEh</code> can be of two styles (Style property):</p><p><code>csDropDownEh</code> - Application can assign and users can type text which does not contain in data list.</p><p><code>csDropDownListEh</code> - Application can assign and users can type text which is only present in data list.</p><p>If <code>KeyField</code>, <code>ListField</code>, <code>ListSource</code>, <code>DataField</code> and <code>DataSource</code> properties are empty then you can assign <code>KeyValue</code> and <code>Text</code> values which doesn&#39;t affect each other.</p><p>Drop down window takes values from dataset that determines by <code>ListSource</code> property.</p><p>Drop down list can:</p><ul><li>Show titles (Captions is took from Field.FisplayLabel property),</li><li>Show special non-scrolled row in top part of list (SpecRow propery).</li><li>Have sizing grip (Sizable property),</li><li>Automaticaly set width of window as sum of DisplayWidth of the list fields (Set Width propery = -1),</li><li>Automaticaly drops when user presses any key (AutoDrop property).</li><li>Have specified width (Width property).</li></ul>',9),c=[a];function d(n,p){return e(),t("div",null,c)}const h=o(s,[["render",d],["__file","16-tdblookupcomboboxeh-control.html.vue"]]);export{h as default};
